package binfileutils;

import java.util.BitSet;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;
import java.util.zip.DataFormatException;

/**
 * This class decodes binary files generated by Amverseas. This class can decode
 * message types 1 , 2 and 3.
 *
 * @author Pedro Pena
 * @version 1.0
 *
 */
public class BinDecoder {

    XBTProfile xBTProfile;

    static BitSet bits; //holds bits from file

    /**
     * The constructor accepts the filename of the bin file to decode.
     *
     * @param filePath A string representing the absolute filename of the bin
     * file to decode.
     */
    public BinDecoder(String filePath) {//constructor accepts a sting representing the file and populates bits.
        try {

            Path path = Paths.get(filePath);
            byte[] data = Files.readAllBytes(path);
            bits = changeEndian(BitSet.valueOf(data));
            xBTProfile = decodeXBTProfile();
            if (xBTProfile.getNewMessageType() == 0){
            throw new DataFormatException("The file is not an AOML XBT binary.");
            }

        } catch (Exception e) {
            System.out.println(e);
        }

    }//end constructor

    /**
     * <strong>(FXY1011)</strong>-This method returns the ship's WMO ID
     *
     * @return    <strong>(FXY1011)</strong>-This method returns a the ship's WMO
     * ID
     */
    private String getWMOID() {
        int start = XBTProfileDataRanges.getCallsign(1)[0];
        int end = XBTProfileDataRanges.getCallsign(1)[1];
        return toString(start, end);
    }// end method

    /**
     * <strong>(FXY1011)</strong>-This method returns the ship's WMO ID
     *
     * @return    <strong>(FXY1011)</strong>-This method returns a the ship's WMO
     * ID
     */
    private String getCallsign() {

        return getWMOID();
    }// end method

    /**
     * <strong>(FXY48211)</strong>-This method returns the old message type.
     *
     * @return  <strong>(FXY48211)</strong>-This method returns the old message
     * type.Returns 0 when there is an exception.
     */
    private int getOldMessageType() {
        int start = XBTProfileDataRanges.getOldMessageType(1)[0];
        int end = XBTProfileDataRanges.getOldMessageType(1)[1];

        try {

            return toInteger(start, end);
        } catch (Exception e) {
            return 0;
        }
    }

    /**
     * <strong>(FXY48216)</strong>-This method returns the new message types
     * used in Amverseas
     *
     * @return  <strong>(FXY48216)</strong>-This method returns the new message
     * types used in Amverseas The types can be a value from 1-3. Returns 0 when
     * there is an exception.
     */
    private int getNewMessageType() {
        int start = XBTProfileDataRanges.getNewMessageType(1)[0];
        int end = XBTProfileDataRanges.getNewMessageType(1)[1];

        try {

            return toInteger(start, end);
        } catch (Exception e) {
            return 0;
        }//end catch
    }

    /**
     * <strong>(FXY5001)</strong>-This method returns the latitude where the
     * measurement was made.
     *
     * @return  <strong>(FXY5001)</strong>-This method returns the latitude where
     * the measurement was made. The value is returned in decimal degrees.
     */
    private double getLatitude() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getLattitude(mt)[0];
        int end = XBTProfileDataRanges.getLattitude(mt)[1];

        return (toInteger(start, end) - 9000000) / 100000.0;

    }//end method

    /**
     * <strong>(FXY6001)</strong>-This method returns the longitude where the
     * measurement was made
     *
     * @return  <strong>(FXY6001)</strong>-This method returns the longitude
     * where the measurement was made. The value is returned in decimal degrees.
     */
    private double getLongitude() {

        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getLongitude(mt)[0];
        int end = XBTProfileDataRanges.getLongitude(mt)[1];
        return (toInteger(start, end) - 18000000) / 100000.0;
    }//end method

    /**
     * <strong>(FXY1080)</strong>-This method returns the name given to the
     * transect.
     *
     * @return  <strong>(FXY1080)</strong>-This method returns the name given to
     * the transect. e.g. AX10 This field became available beginning with
     * message type 2
     */
    private String getSoopLine() {

        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getSoopLine(mt)[0];
        int end = XBTProfileDataRanges.getSoopLine(mt)[1];
        return toString(start, end);

    }

    /**
     * <strong>(FXY5036)</strong>-This method returns the transect number for
     * the line.
     *
     * @return <strong>(FXY5036)</strong>-This method returns the transect
     * number for the line. This is the number assigned to a transect repeated
     * in the same calendar year. e.g. The second transect would have a value of
     * 2. A value of -999 is returned when there is no value.
     */
    private int getTransectNumber() {

        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getTransectNumber(mt)[0];
        int end = XBTProfileDataRanges.getTransectNumber(mt)[1];

        return toInteger(start, end);
    }

    /**
     * <strong>(FXY48304)</strong>-
     *
     * @return <strong>(FXY48304)</strong>-This method returns
     */
    private int getSequenceNumber() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getSequenceNumber(mt)[0];
        int end = XBTProfileDataRanges.getSequenceNumber(mt)[1];

        return toInteger(start, end);
    }

    /**
     * <strong>(FXY4001)</strong>-This method returns the year in which the
     * measurement was made.
     *
     * @return <strong>(FXY4001)</strong>-This method returns the year in which
     * the measurement was made. A value of -999 is returned when there is no
     * value.
     */
    private int getYear() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getYear(mt)[0];
        int end = XBTProfileDataRanges.getYear(mt)[1];
        return toInteger(start, end);
    }

    /**
     * <strong>(FXY4002)</strong>-This method returns the month in which the
     * measurement was made.
     *
     * @return <strong>(FXY4002)</strong>-This method returns the month in which
     * the measurement was made. A value of -999 is returned when there is no
     * value.
     */
    private int getMonth() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getMonth(mt)[0];
        int end = XBTProfileDataRanges.getMonth(mt)[1];
        return toInteger(start, end);
    }

    /**
     * <strong>(FXY4003)</strong>-This method returns the day in which the
     * measurement was made.
     *
     * @return <strong>(FXY4003)</strong>-This method returns the day in which
     * the measurement was made. A value of -999 is returned when there is no
     * value.
     */
    private int getDay() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getDay(mt)[0];
        int end = XBTProfileDataRanges.getDay(mt)[1];
        return toInteger(start, end);
    }

    /**
     * <strong>(FXY4004)</strong>-This method returns the GMT hour when the
     * measurement was made.
     *
     * @return <strong>(FXY4004)</strong>-This method returns the GMT hour when
     * the measurement was made. A value of -999 is returned when there is no
     * value.
     */
    private int getHour() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getHour(mt)[0];
        int end = XBTProfileDataRanges.getHour(mt)[1];
        return toInteger(start, end);
    }

    /**
     * <strong>(FXY4005)</strong>-This method returns the GMT minute when the
     * measurement was made
     *
     * @return <strong>(FXY4005)</strong>-This method returns the GMT minute
     * when the measurement was made A value of -999 is returned when there is
     * no value.
     */
    private int getMinute() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getMinute(mt)[0];
        int end = XBTProfileDataRanges.getMinute(mt)[1];
        return toInteger(start, end);
    }

    /**
     * <strong>(FXY1200)</strong>-This method returns the name of the ship. If
     * there is no
     *
     * @return <strong>(FXY1200)</strong>-This method returns the name of the
     * ship. If there is no name then the string null is returned.
     */
    private String getShipName() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getShipName(mt)[0];
        int end = XBTProfileDataRanges.getShipName(mt)[1];
        return toString(start, end);
    }

    /**
     * <strong>(FXY1201)</strong>-This method returns the ships International
     * Maritime Organization (IMO) number.
     *
     * @return <strong>(FXY1201)</strong>-This method returns the ships
     * International Maritime Organization (IMO) number. A value of -999 is
     * returned when there is no value.
     */
    private int getLloyds() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getLloyds(mt)[0];
        int end = XBTProfileDataRanges.getLloyds(mt)[1];
        return toInteger(start, end);
    }

    /**
     * <strong>(FXY48302)</strong>-This method returns the CRC value for the bin
     * file.
     *
     * @return <strong>(FXY48302)</strong>-This method returns the CRC value for
     * the bin file. This value is computed by WRITE LOGIC HERE Once computed,
     * the value returned by this method must match. If there is not a match,
     * then the bin file is possibly corrupt. A value of -999 is returned when
     * there is no value.
     */
    private int getUniqueTag() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getUniqueTag(mt)[0];
        int end = XBTProfileDataRanges.getUniqueTag(mt)[1];
        return toInteger(start, end);
    }

    /**
     * <strong>(FXY48201)</strong>-This method returns the version of Amverseas
     * used to make the measurement.
     *
     * @return <strong>(FXY48201)</strong>-This method returns the version of
     * Amverseas used to make the measurement. This value must later be massaged
     * to get the actual version. e.g. 920 must be dived by 100 to get Amverseas
     * version 9.20 A value of -999 is returned when there is no value.
     */
    private int getSeasVersion() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getSeasVersion(mt)[0];
        int end = XBTProfileDataRanges.getSeasVersion(mt)[1];
        return toInteger(start, end);
    }

    /**
     * <strong>(FXY48300)</strong>-This method returns the serial number of the
     * XBT used to make the measurement.
     *
     * @return <strong>(FXY48300)</strong>-This method returns the serial number
     * of the XBT used to make the measurement. A value of -999 is returned when
     * there is no value.
     */
    private int getProbeSerialNumber() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getProbeSerialNumber(mt)[0];
        int end = XBTProfileDataRanges.getProbeSerialNumber(mt)[1];
        return toInteger(start, end);
    }

    /**
     * <strong>(FXY48303)</strong>-This method returns the resolution of the
     * profile.
     *
     * @return <strong>(FXY48303)</strong>-This method returns the resolution of
     * the profile. A value of 1 is full resolution a value of 2 is 1 meter
     * resolution and a value of 3 is two meter resolution. A value of -999 is
     * returned when there is no value.
     */
    private int getThisDataIs() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getThisDataIs(mt)[0];
        int end = XBTProfileDataRanges.getThisDataIs(mt)[1];
        return toInteger(start, end);
    }

    /**
     * <strong>(FXY33003)</strong>-This method returns the quality of the data
     * as entered by the user.
     *
     * @return <strong>(FXY33003)</strong>-This method returns the quality of
     * the data as entered by the user. If the user suspects the data is of a
     * quality other than good, the user can add it to the profile after the
     * measurement has been made. A value of -999 is returned when there is no
     * value.
     */
    private int getDataQuality() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getDataQuality(mt)[0];
        int end = XBTProfileDataRanges.getDataQuality(mt)[1];
        return toInteger(start, end);
    }

    /**
     * <strong>(FXY48305)</strong>-This method returns the approximate height of
     * the autolauncher from the surface of the water.
     *
     * @return <strong>(FXY48305)</strong>-This method returns the approximate
     * height of the autolauncher from the surface of the water. A value of
     * -9.99 is returned when there is no value.
     */
    private double getLaunchHeight() {

        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getLaunchHeight(mt)[0];
        int end = XBTProfileDataRanges.getLaunchHeight(mt)[1];
        return toInteger(start, end) / 100.00;
    }

    /**
     * <strong>(FXY1012)</strong>-This method returns the direction in degrees
     * that the ship was heading when the measurement was made.
     *
     * @return <strong>(FXY1012)</strong>-This method returns the direction in
     * degrees that the ship was heading when the measurement was made. A value
     * of -999.0 is returned when there is no value.
     */
    private double getShipDirection() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getShipDirection(mt)[0];
        int end = XBTProfileDataRanges.getShipDirection(mt)[1];
        return toInteger(start, end);
    }//end method

    /**
     * <strong>(FXY1013)</strong>-This method returns the speed of the ship in
     * m/s when the measurement was made.
     *
     * @return <strong>(FXY1013)</strong>-This method returns the speed of the
     * ship in m/s when the measurement was made. A value of -9.99 is returned
     * when there is no value.
     */
    private double getShipSpeed() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getShipSpeed(mt)[0];
        int end = XBTProfileDataRanges.getShipSpeed(mt)[1];
        return toInteger(start, end) / 100.0;
    }//end method

    /**
     * <strong>(FXY22067)</strong>-This method returns a table value that
     * represents the type of probe used to make the measurement.
     *
     * @return <strong>(FXY22067)</strong>-This method returns a table value
     * that represents the type of probe used to make the measurement.<br>
     * e.g. a value of 52 refers to a Deep Blue XBT. A value of -999 is returned
     * when there is no value.
     */
    private int getInstrumentType() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getInstrumentType(mt)[0];
        int end = XBTProfileDataRanges.getInstrumentType(mt)[1];
        return toInteger(start, end);
    }//end method

    /**
     * <strong>(FXY22068)</strong>-This method returns a table value that
     * represents the device that determines the thermistor value in the XBT.
     *
     * @return <strong>(FXY22068)</strong>-This method returns a table value
     * that represents the device that determines the thermistor value in the
     * XBT.<br>
     * e.g. a value of 6 refers to any of the different Sippican MK21 models. A
     * value of -999 is returned when there is no value.
     *
     */
    private int getRecorderType() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getRecorderType(mt)[0];
        int end = XBTProfileDataRanges.getRecorderType(mt)[1];
        return toInteger(start, end);
    }//end method

    /**
     * <strong>(FXY2002)</strong>-This method returns a table value that
     * represents the type of anemometer used.
     *
     * @return <strong>(FXY2002)</strong>-This method returns a table value that
     * represents the type of anemometer used. A value of -999 is returned when
     * there is no value.
     */
    private int getWindInstrumentType() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getWindInstrumentType(mt)[0];
        int end = XBTProfileDataRanges.getWindInstrumentType(mt)[1];
        return toInteger(start, end);
    }//end method

    /**
     * <strong>(FXY11001)</strong>-This method returns the wind direction in
     * degrees at the time of the measurement.
     *
     * @return <strong>(FXY11001)</strong>-This method returns the wind
     * direction in degrees at the time of the measurement. A value of -999 is
     * returned when there is no value.
     */
    private double getWindDirection() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getWindDirection(mt)[0];
        int end = XBTProfileDataRanges.getWindDirection(mt)[1];
        return toInteger(start, end);
    }//end method

    /**
     * <strong>(FXY11002)</strong>-This method returns the wind speed in degrees
     * at the time of the measurement.
     *
     * @return <strong>(FXY11002)</strong>-This method returns the wind speed in
     * m/s at the time of the measurement. A value of -99.9 is returned when
     * there is no value.
     */
    private double getWindSpeed() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getWindSpeed(mt)[0];
        int end = XBTProfileDataRanges.getWindSpeed(mt)[1];
        return toInteger(start, end) / 10.0;
    }//end method

    /**
     * <strong>(FXY12004)</strong>-This method returns the dry bulb temperature
     * at the time of the measurement.
     *
     * @return <strong>(FXY12004)</strong>-This method returns the dry bulb
     * temperature at the time of the measurement. A value of -99.9 is returned
     * when there is no value.
     */
    private double getDryBulbTemperature() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getDryBulbTemperature(mt)[0];
        int end = XBTProfileDataRanges.getDryBulbTemperature(mt)[1];
        return toInteger(start, end) / 10.0;
    }//end method

    /**
     * <strong>(FXY2030)</strong>-This method returns the sea current
     * measurement method.
     *
     * @return <strong>(FXY2030)</strong>-This method returns the sea current
     * measurement method. A value of -999 is returned when there is no value.
     */
    private int getSeaSurfaceCurrentMeasurementMethod() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getSeaSurfaceCurrentMeasurementMethod(mt)[0];
        int end = XBTProfileDataRanges.getSeaSurfaceCurrentMeasurementMethod(mt)[1];
        return toInteger(start, end);
    }//end method

    /**
     * <strong>(FXY22004)</strong>-This method returns the sea surface current
     * direction .
     *
     * @return <strong>(FXY22004)</strong>-This method returns the sea surface
     * current direction . A value of -999 is returned when there is no value.
     */
    private int getSeaSurfaceCurrentDirection() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getSeaSurfaceCurrentDirection(mt)[0];
        int end = XBTProfileDataRanges.getSeaSurfaceCurrentDirection(mt)[1];
        return toInteger(start, end);
    }//end method

    /**
     * <strong>(FXY22031)</strong>-This method returns the sea surface current
     * speed
     *
     * @return <strong>(FXY22031)</strong>-This method returns the sea surface
     * current speed A value of -999 is returned when there is no value.
     */
    private double getSeaSurfaceCurrentSpeed() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getSeaSurfaceCurrentSpeed(mt)[0];
        int end = XBTProfileDataRanges.getSeaSurfaceCurrentSpeed(mt)[1];
        return toInteger(start, end) / 100.00;
    }//end method

    /**
     * <strong>(FXY22063)</strong>-This method returns the total water depth at
     * the location where the measurement was made.
     *
     * @return <strong>(FXY22063)</strong>-This method returns the total water
     * depth at the location where the measurement was made. A value of -999 is
     * returned when there is no value.
     */
    private int getTotalWaterDepth() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getTotalWaterDepth(mt)[0];
        int end = XBTProfileDataRanges.getTotalWaterDepth(mt)[1];
        return toInteger(start, end);
    }//end method

    /**
     * <strong>(FXY1036)</strong>-This method returns the agency in charge of
     * operating the observation platform.
     *
     * @return <strong>(FXY1036)</strong>-This method returns the agency in
     * charge of operating the observation platform. A value of -999 is returned
     * when there is no value.
     */
    private int getAgencyOwner() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getAgencyOwner(mt)[0];
        int end = XBTProfileDataRanges.getAgencyOwner(mt)[1];
        return toInteger(start, end);
    }//end method

    /**
     * <strong>(FXY22178)</strong>-This method returns a table value that
     * represents the type of launcher used.
     *
     * @return <strong>(FXY22178)</strong>-This method returns a table value
     * that represents the type of launcher used. A value of -999 is returned
     * when there is no value.
     */
    private int getXBTLauncherType() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getXBTLauncherType(mt)[0];
        int end = XBTProfileDataRanges.getXBTLauncherType(mt)[1];
        return toInteger(start, end);
    }//end method

    /**
     * <strong>(FXY2171)</strong>-This method returns the serial number of the
     * recorder used.
     *
     * @return <strong>(FXY2171)</strong>-This method returns the serial number
     * of the recorder used. A value of -999 is returned when there is no value.
     */
    private String getXBTRecorderSerialNumber() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getXBTRecorderSerialNumber(mt)[0];
        int end = XBTProfileDataRanges.getXBTRecorderSerialNumber(mt)[1];
        return toString(start, end);
    }// end method

    /**
     * <strong>(FXY4001)</strong>-This method returns the year in which the
     * recorder was manufactured.
     *
     * @return <strong>(FXY4001)</strong>-This method returns the year in which
     * the recorder was manufactured. A value of -999 is returned when there is
     * no value.
     */
    private int getXBTRecorderManufacturedYear() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getXBTRecorderManufacturedYear(mt)[0];
        int end = XBTProfileDataRanges.getXBTRecorderManufacturedYear(mt)[1];
        return toInteger(start, end);
    }// end method

    /**
     * <strong>(FXY4002)</strong>-This method returns the month in which the
     * recorder was manufactured.
     *
     * @return <strong>(FXY4002)</strong>-This method returns the month in which
     * the recorder was manufactured. A value of -999 is returned when there is
     * no value.
     */
    private int getXBTRecorderManufacturedMonth() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getXBTRecorderManufacturedMonth(mt)[0];
        int end = XBTProfileDataRanges.getXBTRecorderManufacturedMonth(mt)[1];
        return toInteger(start, end);
    }// end method

    /**
     * <strong>(FXY4003)</strong>-This method returns the day in which the
     * recorder was manufactured.
     *
     * @return <strong>(FXY4003)</strong>-This method returns the day in which
     * the recorder was manufactured. A value of -999 is returned when there is
     * no value.
     */
    private int getXBTRecorderManufacturedDay() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getXBTRecorderManufacturedDay(mt)[0];
        int end = XBTProfileDataRanges.getXBTRecorderManufacturedDay(mt)[1];
        return toInteger(start, end);
    }// end method

    /**
     * <strong>(FXY4001)</strong>-This method returns the year the XBT was
     * manufactured.
     *
     * @return <strong>(FXY4001)</strong>-This method returns the year the XBT
     * was manufactured. A value of -999 is returned when there is no value.
     */
    private int getXBTProbeManufacturedYear() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getXBTProbeManufacturedYear(mt)[0];
        int end = XBTProfileDataRanges.getXBTProbeManufacturedYear(mt)[1];
        return toInteger(start, end);
    }// end method

    /**
     * <strong>(FXY4002)</strong>-This method returns the month in which the XBT
     * was manufactured.
     *
     * @return <strong>(FXY4002)</strong>-This method returns the month in which
     * the XBT was manufactured. A value of -999 is returned when there is no
     * value.
     */
    private int getXBTProbeManufacturedMonth() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getXBTProbeManufacturedMonth(mt)[0];
        int end = XBTProfileDataRanges.getXBTProbeManufacturedMonth(mt)[1];
        return toInteger(start, end);
    }// end method

    /**
     * <strong>(FXY4003)</strong>-This method returns the day in which the XBT
     * was manufactured.
     *
     * @return <strong>(FXY4003)</strong>-This method returns the day in which
     * the XBT was manufactured. A value of -999 is returned when there is no
     * value.
     */
    private int getXBTProbeManufacturedDay() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getXBTProbeManufacturedDay(mt)[0];
        int end = XBTProfileDataRanges.getXBTProbeManufacturedDay(mt)[1];
        return toInteger(start, end);
    }// end method

    /**
     * <strong>(FXY31001B)</strong>-This method returns the number of 40 bit
     * blocks or 5 characters, used to store the rider name.
     *
     * @return <strong>(FXY31001B)</strong>-This method returns the number of 40
     * bit blocks or 5 characters, used to store the rider name. A value of -999
     * is returned when there is no value.
     */
    private int getNumberOfRiderBlocks() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getNumberOfRiderBlocks(mt)[0];
        int end = XBTProfileDataRanges.getNumberOfRiderBlocks(mt)[1];
        return toInteger(start, end);
    }// end method

    /**
     * <strong>(FXY31001B)</strong>-This method returns the number of 40 bit
     * blocks or 5 characters, used to store the riders institution's name.
     *
     * @return <strong>(FXY31001B)</strong>-This method returns the number of 40
     * bit blocks or 5 characters, used to store the riders institution's name.
     * A value of -999 is returned when there is no value.
     */
    private int getNumberOfRiderInstitutionBlocks() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getNumberOfRiderInstitutionBlocks(mt)[0];
        int end = XBTProfileDataRanges.getNumberOfRiderInstitutionBlocks(mt)[1];
        return toInteger(start, end);
    }// end method

    /**
     * <strong>(FXY31001B)</strong>-This method returns the number of 40 bit
     * blocks or 5 characters, used to store the rider's email address.
     *
     * @return <strong>(FXY31001B)</strong>-This method returns the number of 40
     * bit blocks or 5 characters, used to store the rider's email address. A
     * value of -999 is returned when there is no value.
     */
    private int getNumberOfRiderEmailBlocks() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getNumberOfRiderEmailBlocks(mt)[0];
        int end = XBTProfileDataRanges.getNumberOfRiderEmailBlocks(mt)[1];
        return toInteger(start, end);
    }// end method

    /**
     * <strong>(FXY31001B)</strong>-This method returns the number of 40 bit
     * blocks or 5 characters, used to store the rider's phone number.
     *
     * @return <strong>(FXY31001B)</strong>-This method returns the number of 40
     * bit blocks or 5 characters, used to store the rider's phone number. A
     * value of -999 is returned when there is no value.
     */
    private int getNumberOfRiderPhoneBlocks() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getNumberOfRiderPhoneBlocks(mt)[0];
        int end = XBTProfileDataRanges.getNumberOfRiderPhoneBlocks(mt)[1];
        return toInteger(start, end);
    }// end method

    /**
     * <strong>(FXY100000)</strong>-Delayed Replicator
     *
     * @return <strong>(FXY100000)</strong>-Delayed Replicator! Different from
     * BUFR. The number contained within is the number of following consecutive
     * fields to replicate. This field must be followed by FXY31200 to identify
     * how many groups of replicated fields follow. Always delayed replication.
     * value of -999 is returned when there is no value.
     */
    private int getNumberOfRepeatedFields() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getNumberOfRepeatedFields(mt)[0];
        int end = XBTProfileDataRanges.getNumberOfRepeatedFields(mt)[1];
        return toInteger(start, end);
    }// end method

    /**
     * <strong>(FXY31200)</strong>-This method returns the number of temperature
     * measurement points recorded.
     *
     * @return <strong>(FXY31200)</strong>-This method returns the number of
     * temperature measurement points recorded. A value of -999 is returned when
     * there is no value.
     */
    private int getTimesReplicated() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getTimesReplicated(mt)[0];
        int end = XBTProfileDataRanges.getTimesReplicated(mt)[1];
        return toInteger(start, end);
    }// end method

    /**
     * <strong>(FXY22042S)</strong>-This method returns the SST or the first
     * temperature measurement made.
     *
     * @return <strong>(FXY22042S)</strong>-This method returns the SST or the
     * first temperature measurement made. A value of -13.99 is returned when
     * there is no value.
     */
    private double getSeaTemperature() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getSeaTemperature(mt)[0];
        int end = XBTProfileDataRanges.getSeaTemperature(mt)[1];
        return (toInteger(start, end) - 400.00) / 100.00;
    }// end method

    /**
     * <strong>(FXY22042S)</strong>-This method returns the SST or the first
     * temperature measurement made.
     *
     * @return <strong>(FXY22042S)</strong>-This method returns the SST or the
     * first temperature measurement made. A value of -13.99 is returned when
     * there is no value.
     */
    private double getSeaResistance() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getSeaResistance(mt)[0];
        int end = XBTProfileDataRanges.getSeaResistance(mt)[1];
        return (((double)toInteger(start, end) + 0.00 )/ 100.00);
    }// end method    

    /**
     * <strong>(FXY7062S)</strong>-This method returns the depth below the
     * sea/water surface
     *
     * @return <strong>(FXY7062S)</strong>-This method returns the depth below
     * the sea/water surface A value of -999 is returned when there is no value.
     */
    private double getSeaDepth() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getSeaDepth(mt)[0];
        int end = XBTProfileDataRanges.getSeaDepth(mt)[1];
        return (double) toInteger(start, end);

    }// end method

    /**
     * <strong>(FXY22042S)</strong>-This method returns an array containing the
     * temperature measurements made.
     *
     * @return <strong>(FXY22042S)</strong>-This method returns an array
     * containing the temperature measurements made. An empty array is returned
     * when there are no values.
     */
    private double[] getTemperaturePoints() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getTemperaturePoints(mt)[0];
        int points = getTimesReplicated();

        if (points < 0) {
            return new double[0];
        }

        double temps[] = new double[points];
        int counter = 0;
        for (int i = start; i < start + points * 12; i += 12) {
            temps[counter] = (toInteger(i, i + 11) - 400.00) / 100.00;
            counter++;

        }//end for

        return temps;
    }// end method

    /**
     * <strong>(FXY22042S)</strong>-This method returns an array containing the
     * Resistance measurements made.
     *
     * @return <strong>(FXY22042S)</strong>-This method returns an array
     * containing the resistance measurements made. An empty array is returned
     * when there are no values.
     */
    private double[] getResistancePoints() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getResistancePoints(mt)[0];
        int points = getTimesReplicated();
        int bSize = XBTProfileDataRanges.getSeaTemperature(mt)[1]
                - XBTProfileDataRanges.getSeaTemperature(mt)[0] + 1;
        if (points < 0) {
            return new double[0];
        }

        double resistance[] = new double[points];
        int counter = 0;
        for (int i = start; i < start + points * bSize; i += bSize) {
            resistance[counter] = (((double)toInteger(i, i + bSize - 1) - 0.00 ) / 100.00);
            counter++;

        }//end for

        return resistance;
    }// end method    

    /**
     * <strong>(FXY22042S)</strong>-This method returns an array containing the
     * resistance measurements made.
     *
     * @return <strong>(FXY22042S)</strong>-This method returns an array
     * containing the resistance measurements made. An empty array is returned
     * when there are no values.
     */
    private double[] getResistance() {
        int mt = getNewMessageType();
        int start = XBTProfileDataRanges.getResistancePoints(mt)[0];
        int points = getTimesReplicated();
        int bSize = XBTProfileDataRanges.getSeaTemperature(mt)[1]
                - XBTProfileDataRanges.getSeaTemperature(mt)[0] + 1;

        if (points < 0) {
            return new double[0];
        }

        double temps[] = new double[points];
        int counter = 0;
        for (int i = start; i < start + points * bSize; i += bSize) {
            temps[counter] = (toInteger(i, i + bSize - 1) / 100 + 0);
            counter++;

        }//end for

        return temps;
    }// end method    

    /**
     * <strong>(FXY205030A)</strong>-This method returns the rider's name.
     *
     * @return <strong>(FXY205030A)</strong>-This method returns the rider's
     * name. A value of null is returned when there is no value.
     */
    private String getRiderNames() {

        int mt = getNewMessageType();

        int bSize = XBTProfileDataRanges.getSeaTemperature(mt)[1]
                - XBTProfileDataRanges.getSeaTemperature(mt)[0] + 1;
        int start = XBTProfileDataRanges.getRiderNames(mt)[0];

        int s = start + bSize * getTimesReplicated();
        return toString(s, s + getNumberOfRiderBlocks() * 40);
    }// end method

    /**
     * <strong>(FXY205030A)</strong>-This method returns the rider's email.
     *
     * @return <strong>(FXY205030A)</strong>-This method returns the rider's
     * email. A value of null is returned when there is no value.
     */
    private String getRiderEmails() {

        int mt = getNewMessageType();
        int bSize = XBTProfileDataRanges.getSeaTemperature(mt)[1]
                - XBTProfileDataRanges.getSeaTemperature(mt)[0] + 1;      
        int start = XBTProfileDataRanges.getRiderEmails(mt)[0];

        int s = start + bSize * getTimesReplicated() + getNumberOfRiderBlocks() * 40;
        return toString(s, s + getNumberOfRiderEmailBlocks() * 40);
    }// end method

    /**
     * <strong>(FXY205030A)</strong>-This method returns the rider's
     * institution.
     *
     * @return <strong>(FXY205030A)</strong>-This method returns the rider's
     * institution. A value of null is returned when there is no value.
     */
    private String getRiderInstitutions() {

        int mt = getNewMessageType();
        int bSize = XBTProfileDataRanges.getSeaTemperature(mt)[1]
                - XBTProfileDataRanges.getSeaTemperature(mt)[0] + 1;      
        int start = XBTProfileDataRanges.getRiderInstituions(mt)[0];
        int s = start + bSize * getTimesReplicated() + getNumberOfRiderBlocks() * 40 + getNumberOfRiderEmailBlocks() * 40;
        return toString(s, s + getNumberOfRiderInstitutionBlocks() * 40);
    }// end method

    /**
     * <strong>(FXY205030A)</strong>-This method returns the rider's phone
     * number.
     *
     * @return <strong>(FXY205030A)</strong>-This method returns the rider's
     * phone number. A value of null is returned when there is no value.
     */
    private String getRiderPhones() {

        int mt = getNewMessageType();
        int bSize = XBTProfileDataRanges.getSeaTemperature(mt)[1]
                - XBTProfileDataRanges.getSeaTemperature(mt)[0] + 1;
        int start = XBTProfileDataRanges.getRiderPhones(mt)[0];

        int s = start + bSize * getTimesReplicated() + getNumberOfRiderBlocks() * 40 + getNumberOfRiderEmailBlocks() * 40 + getNumberOfRiderInstitutionBlocks() * 40;
        return toString(s, s + getNumberOfRiderPhoneBlocks() * 40);
    }// end method

    public XBTProfile getXBTProfile() {
        return xBTProfile;

    }//end method

    /**
     * <strong>(FXY205030A)</strong>-This method computes and returns an integer
     * from a sequence of bits.
     *
     * @param start the position from which to start extracting a binary
     * sequence.
     * @param end the position from which to end extracting a binary sequence.
     * @return <strong>(FXY205030A)</strong>-This method computes and returns an
     * integer from a sequence of bits.
     */
    private int toInteger(int start, int end) {
        try {
            if (start < 0 || end < 0 || end - start <= 0) {
                return -999;
            }
            end++;
            BitSet b = bits.get(start, end);
            int integer = 0;
            char bit;
            int bLength = end - start;
            for (int i = 0; i < bLength; i++) {
                if (i < bLength + 1) {
                    if (b.get(i)) {
                        bit = 0x01;
                    } else {
                        bit = 0x00;
                    }
                    integer = integer | bit;
                }//end if
                if (i < bLength - 1) {
                    integer = integer << 1;
                }

            }//end for

            return integer;
        }//end try
        catch (Exception e) {
            return -999;
        }//end catch
    }//end method

    /**
     * <strong>(FXY)</strong>-This method computes and returns a string from a
     * sequence of bits.
     *
     * @param start the position from which to start extracting a binary
     * sequence.
     * @param end the position from which to end extracting a binary sequence.
     * @return <strong>(FXY)</strong>-This method computes and returns a string
     * from a sequence of bits.
     */
    private String toString(int start, int end) {
        try {
            if (start < 0 || end < 0 || end - start <= 0) {
                return null;
            }

            String str = "";
            char x;
            BitSet b = bits.get(start, end + 1);
            byte[] bytes;
            bytes = changeEndian(b).toByteArray();
            for (int i = 0; i < bytes.length; i++) {
                x = (char) bytes[i];
                x = (char) (x & 0x00ff);
                if (x >= 32 && x <= 126) { //only add printable characters
                    str += x;
                }
            }
            return str.replaceAll("\\p{C}", "");
        } catch (Exception e) {
            return null;
        }//end catch
    }//end method

    /**
     * <strong>(FXY)</strong>-This method flips the "endianes" of a BitSet
     * object and returns a BitSet object with flipped "endianess".
     *
     * @return <strong>(FXY)</strong>-This method flips the "endianes" of a
     * BitSet object and returns a BitSet object with flipped "endianess".
     */
    private BitSet changeEndian(BitSet b) {
        boolean temp;
        int width = b.length() - 1;
        if (b.length() != b.size() - 1) {
            width = b.size();
        }
        for (int i = 0; i < width; i = i + 8) {
            for (int j = 0; j < 4; j++) {
                temp = b.get(i + j);
                b.set(i + j, b.get(i - j + 7));
                b.set(i - j + 7, temp);
            }//end for

        }//end for
        return b;
    }//end method

    /**
     * This method returns a string representation of the binary sequence in the
     * specified range in the bin file.
     *
     * @param start the bit position from which to start constructing the binary
     * sequence.
     * @param end the bit position from which to stop construction the binary
     * sequence.
     * @return <strong>(FXY)</strong>-This method returns a string
     * representation of the binary sequence in the specified range in the bin
     * file.
     */
    private String getBinarySequence(int start, int end) {
        String str = "";
        for (int i = start; i <= end; i++) {

            if (bits.get(i)) {
                str += "1";
            }
            if (!bits.get(i)) {
                str += "0";
            }
            if ((i - start + 1) % 8 == 0) {
                str += " ";
            }

        }//end for
        return str;
    }//end method

    private XBTProfile decodeXBTProfile() {
        int messageType = getNewMessageType();
        XBTProfile xBTProfile = new XBTProfile();
        xBTProfile.setAgencyOwner(getAgencyOwner());
        xBTProfile.setDataQuality(getDataQuality());
        xBTProfile.setDay(getDay());
        xBTProfile.setDryBulbTemperature(getDryBulbTemperature());
        xBTProfile.setHour(getHour());
        xBTProfile.setInstrumentType(getInstrumentType());
        xBTProfile.setLatitude(getLatitude());
        xBTProfile.setLaunchHeight(getLaunchHeight());
        xBTProfile.setLloyds(getLloyds());
        xBTProfile.setLongitude(getLongitude());
        xBTProfile.setMinute(getMinute());
        xBTProfile.setMonth(getMonth());
        xBTProfile.setNewMessageType(messageType);
        xBTProfile.setNumberOfRepeatedFields(getNumberOfRepeatedFields());
        xBTProfile.setNumberOfRiderBlocks(getNumberOfRiderBlocks());
        xBTProfile.setNumberOfRiderEmailBlocks(getNumberOfRiderEmailBlocks());
        xBTProfile.setNumberOfRiderInstitutionBlocks(getNumberOfRiderInstitutionBlocks());
        xBTProfile.setNumberOfRiderPhoneBlocks(getNumberOfRiderPhoneBlocks());
        xBTProfile.setOldMessageType(getOldMessageType());
        xBTProfile.setProbeSerialNumber(getProbeSerialNumber());
        xBTProfile.setRecorderType(getRecorderType());
        xBTProfile.setRiderNames(getRiderNames());
        xBTProfile.setRiderEmails(getRiderEmails());
        xBTProfile.setRiderInstitutions(getRiderInstitutions());
        xBTProfile.setRiderPhones(getRiderPhones());
        xBTProfile.setSeaDepth(getSeaDepth());
        xBTProfile.setSeaSurfaceCurrentDirection(getSeaSurfaceCurrentDirection());
        xBTProfile.setSeaSurfaceCurrentMeasurementMethod(getSeaSurfaceCurrentMeasurementMethod());
        xBTProfile.setSeaSurfaceCurrentSpeed(getSeaSurfaceCurrentSpeed());
        if (messageType == MessageType.MESSAGE_TYPE_4) {
            xBTProfile.setSeaSurfaceResistance(getSeaResistance());
        }//end if
        else {
            xBTProfile.setSeaSurfaceTemperature(getSeaTemperature());
        }//end else

        xBTProfile.setSeasVersion(getSeasVersion());
        xBTProfile.setSequenceNum(getSequenceNumber());
        xBTProfile.setShipDirection(getShipDirection());
        xBTProfile.setShipName(getShipName());
        xBTProfile.setShipSpeed(getShipSpeed());
        xBTProfile.setSoopLine(getSoopLine());
        if (messageType == MessageType.MESSAGE_TYPE_4) {
            xBTProfile.setResistancePoints(getResistancePoints());
        }//end if
        else {
            xBTProfile.setTemperaturePoints(getTemperaturePoints());
        }//end else

        xBTProfile.setThisDataIs(getThisDataIs());
        xBTProfile.setTimesReplicated(getTimesReplicated());
        xBTProfile.setTotalWaterDepth(getTotalWaterDepth());
        xBTProfile.setTransectNum(getTransectNumber());
        xBTProfile.setUniqueTag(getUniqueTag());
        xBTProfile.setWindDirection(getWindDirection());
        xBTProfile.setWindInstrumentType(getWindInstrumentType());
        xBTProfile.setWindSpeed(getWindSpeed());
        xBTProfile.setCallsign(getCallsign());
        xBTProfile.setXBTLauncherType(getXBTLauncherType());
        xBTProfile.setXBTProbeManufacturedDay(getXBTProbeManufacturedDay());
        xBTProfile.setXBTProbeManufacturedMonth(getXBTProbeManufacturedMonth());
        xBTProfile.setXBTProbeManufacturedYear(getXBTProbeManufacturedYear());
        xBTProfile.setXBTRecorderManufacturedDay(getXBTRecorderManufacturedDay());
        xBTProfile.setXBTRecorderManufacturedMonth(getXBTRecorderManufacturedMonth());
        xBTProfile.setXBTRecorderManufacturedYear(getXBTRecorderManufacturedYear());
        xBTProfile.setXBTRecorderSerialNumber(getXBTRecorderSerialNumber());
        xBTProfile.setYear(getYear());

        return xBTProfile;

    }//end method

}//end class

